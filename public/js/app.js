;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Backbone, React, appContainer, director, events, render, sharedRoutes;

director = require('director');

React = require('react');

Backbone = require('exoskeleton');

Backbone.ajax = require('./lib/exoskeleton/client_ajax');

events = require('events');

sharedRoutes = require('./routes');

appContainer = document.getElementById('app');

render = function(options) {
  if (options == null) {
    options = {};
  }
  document.getElementsByTagName("title")[0].innerHTML = options.title;
  return React.renderComponent(options.component, appContainer);
};

document.addEventListener("DOMContentLoaded", function() {
  var action, route, router, _fn;
  React.initializeTouchEvents(true);
  router = director.Router().configure({
    html5history: true
  });
  _fn = function(route, action) {
    return router.on(route, function() {
      return action.apply(this, arguments).then(function(options) {
        return render(options);
      }).fail(function(error) {
        return console.log("error", error);
      }).done();
    });
  };
  for (route in sharedRoutes) {
    action = sharedRoutes[route];
    _fn(route, action);
  }
  router.init();
  return document.addEventListener('click', function(event) {
    var protocol, target;
    target = event.target;
    protocol = "" + target.protocol + "//";
    if (target.href.slice(protocol.length) !== protocol) {
      event.preventDefault();
      return router.setRoute(target.href);
    }
  });
});



},{"./lib/exoskeleton/client_ajax":5,"./routes":7,"director":"Me1FqV","events":4,"exoskeleton":"xaFiq/","react":"xT97vT"}],2:[function(require,module,exports){
var Backbone, TeamModel, TeamsCollection;

Backbone = require('exoskeleton');

TeamModel = require('../models/team');

TeamsCollection = Backbone.Collection.extend({
  url: "http://localhost:4000/json/teams.json",
  model: TeamModel,
  comparator: "name"
});

module.exports = TeamsCollection;



},{"../models/team":6,"exoskeleton":"xaFiq/"}],3:[function(require,module,exports){
var TeamsCollection, teamsCollection;

TeamsCollection = require('../../collections/teams');

teamsCollection = new TeamsCollection([]);

teamsCollection.fetched = teamsCollection.fetch({
  parse: false
});

module.exports = teamsCollection;



},{"../../collections/teams":2}],4:[function(require,module,exports){
var Backbone;

Backbone = require('exoskeleton');

module.exports = Backbone.extend(Backbone.Events);



},{"exoskeleton":"xaFiq/"}],5:[function(require,module,exports){
var Q, request;

Q = require('q');

request = require('browser-request');

module.exports = function(options) {
  var deferred, opts;
  deferred = Q.defer();
  opts = {
    url: options.url,
    method: options.type || "GET",
    json: options.dataType === "json"
  };
  if (options.data) {
    opts.body;
  }
  request(opts, function(err, resp, body) {
    if (err) {
      deferred.reject(err);
      if (options.error) {
        return options.error(err);
      }
    } else {
      deferred.resolve(body);
      if (options.success) {
        return options.success(body);
      }
    }
  });
  return deferred.promise;
};



},{"browser-request":"GeoHbi","q":"Y51EY2"}],6:[function(require,module,exports){
var Backbone, TeamModel;

Backbone = require('exoskeleton');

TeamModel = Backbone.Model.extend({
  url: function() {
    return "http://localhost:4000/json/" + this.id + ".json";
  },
  parse: function(response) {
    console.log("" + this.id + ".json raw", response);
    return response;
  }
});

module.exports = TeamModel;



},{"exoskeleton":"xaFiq/"}],7:[function(require,module,exports){
var React, TeamView, TeamsListView, teamsCollection;

React = require('react');

TeamsListView = require('./views/teams_list');

TeamView = require('./views/team');

teamsCollection = require('./instances/collections/teams');

module.exports = {
  "/": function() {
    return teamsCollection.fetched.then(function() {
      return {
        title: "Etusivu",
        component: TeamsListView({
          teams: teamsCollection.toJSON()
        })
      };
    });
  },
  "/joukkueet/:id": function(id) {
    return teamsCollection.fetched.then(function() {
      var team;
      team = teamsCollection.get(id);
      return team.fetch().then(function() {
        return {
          title: "Joukkueet - " + id,
          component: TeamView({
            team: team.toJSON()
          })
        };
      });
    });
  }
};



},{"./instances/collections/teams":3,"./views/team":9,"./views/teams_list":11,"react":"xT97vT"}],8:[function(require,module,exports){
var PlayerStats, React;

React = require('react');

PlayerStats = React.createClass({
  render: function() {
    return React.DOM.table(null, React.DOM.thead(null, React.DOM.tr(null, React.DOM.th(null, "First name"), React.DOM.th(null, "Last name"), React.DOM.th(null, "Games"), React.DOM.th(null, "Goals"), React.DOM.th(null, "Assists"), React.DOM.th(null, "Points"), React.DOM.th(null, "Penalties"), React.DOM.th(null, "+/-"))), this.props.stats.map(function(player) {
      return React.DOM.tr(null, React.DOM.td(null, player.firstName), React.DOM.td(null, player.lastName), React.DOM.td(null, player.games), React.DOM.td(null, player.goals), React.DOM.td(null, player.assists), React.DOM.td(null, player.points), React.DOM.td(null, player.penalties), React.DOM.td(null, player.plusMinus));
    }));
  }
});

module.exports = PlayerStats;



},{"react":"xT97vT"}],9:[function(require,module,exports){
var PlayerStats, React, Team;

React = require('react');

PlayerStats = require('./player_stats');

Team = React.createClass({
  render: function() {
    return React.DOM.div({
      "className": "team"
    }, React.DOM.div(null, this.props.team.name), PlayerStats({
      "stats": this.props.team.playerStats
    }), React.DOM.div(null, this.props.team.teamStats.city));
  }
});

module.exports = Team;



},{"./player_stats":8,"react":"xT97vT"}],10:[function(require,module,exports){
var React, TeamItem;

React = require('react');

TeamItem = React.createClass({
  render: function() {
    return React.DOM.a({
      "className": "team " + this.props.team.id,
      "href": "/joukkueet/" + this.props.team.id
    }, this.props.team.name);
  }
});

module.exports = TeamItem;



},{"react":"xT97vT"}],11:[function(require,module,exports){
var React, TeamItem, TeamsList;

React = require('react');

TeamItem = require('./team_item');

TeamsList = React.createClass({
  render: function() {
    return React.DOM.div(null, React.DOM.h1(null, "Liiga"), React.DOM.div({
      "className": "teams_view"
    }, this.props.teams.map(function(team) {
      return TeamItem({
        key: team.id,
        team: team
      });
    })));
  }
});

module.exports = TeamsList;



},{"./team_item":10,"react":"xT97vT"}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
;